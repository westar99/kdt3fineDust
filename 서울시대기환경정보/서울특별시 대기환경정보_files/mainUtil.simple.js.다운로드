

	var _DEFAULT_LOC = '111121'; //  디폴트 자치구(중구)

	function geoFindMe() {

		/*
		 * https://stackoverflow.com/questions/41612543/custom-popup-for-get-my-current-location
		 * 보안의 이유로 사용자 정의 알림창으로 사용자 위치를 물을수없음.
		 */
		var ckAirType = getCookie("ckAirType");
		function success(position) {
			var lat = position.coords.latitude;
			var long = position.coords.longitude;
			var accuracy = position.coords.accuracy;
			var code = CleanMap.whereIs([lat,long]); // 좌표를 구 코드로 변환
			console.log('geoFindMe - success : ' + code);
			CleanMap.initialize(code, ckAirType);
		}
	

		function error(e) {
			// 1: 사용자가 위치 정보를 공유 권한을 제공하지 않음.
			// 2: 브라우저가 위치를 가져올 수 없음.
			// 3: 타임아웃이 발생됨.
			console.log("Geolocation 오류 "+e.code +": " + e.message);
			CleanMap.initialize(_DEFAULT_LOC, ckAirType);
		}
		
		var ckRegionCode = getCookie("ckRegionCode");
		var link = document.location.href.split("?");
		
		if(link[1] != null && link[1] != "") {
			var index = link[1].split("&");
			var length = index.length;

			var area = "111121"; //  디폴트 자치구(중구)
			var type = "pm25";

			if(length >= 2) {
				area = index[0].replace("area=", "");
				type = index[1].replace("type=", "");
			} else {
				if(index[0].includes("area")) {
					area = index[0].replace("area=", "");
				} else if(index[0].includes("type")) {
					type = index[0].replace("type=", "");
				}
			}
			_DEFAULT_LOC = area;
			ckAirType = type;
			
			console.log("북마크에서 지역가져옴.");
			console.log("area : " + _DEFAULT_LOC + ", type : " + ckAirType);

			CleanMap.initialize(area, type);

		} else if ( ckRegionCode != null && ckRegionCode != "" && ckRegionCode != "0" && ckRegionCode.length > 2 ) {
			console.log("쿠키에서 지역가져옴.");
			console.log("area : " + ckRegionCode + ", type : " + ckAirType);
			_DEFAULT_LOC = ckRegionCode;
			CleanMap.initialize(ckRegionCode, ckAirType);
		} else {
			if (!navigator.geolocation) {
				console.log('Geolocation is not supported by your browser');
				CleanMap.initialize(_DEFAULT_LOC, ckAirType);
			} else {
				return navigator.geolocation.getCurrentPosition(success, error,
					{
						enableHighAccuracy:true,
					}
				);
			}
		}
		
		var code = CleanMap.Global.SelectedAreaCode;
		var ckAirType = CleanMap.Global.CurrentAirType;
		history.pushState("", "", "?area=" + code + "&type=" + ckAirType);
	}
	
	function mobileCheck() {
		var check = false;
		(function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
		return check;
	};


	
	document.addEventListener('DOMContentLoaded', function () {
		if ( mobileCheck() ) mobileTopOn();
		var _map = Object.create(null);

		mapInit();

		domInit();
		
		geoFindMe();
		
		CleanMap.openPopup();
		
//		geoFindMe();

//		CleanMap.initialize(_DEFAULT_LOC);
		
		CleanMap.Update();
		
		CleanMap.zoomEventHandler();
		
//		refresh();
	});

	
	function refresh(){
		var timerId;
		timerId = setInterval(CleanMap.Update, 1000 * 60 * 10);
		console.log(timerId);
	}

	function mapInit(){

		_map = L.map('map_', {
			continuousWorld: true
			, worldCopyJump: false
			, zoomAnimation: true
			, fadeAnimation: true
			, inertia: false
			, closePopupOnClick: true 
			, attributionControl: false
			, scrollWheelZoom: false
			, tap: false
			, zoomSnap: 0.25
		});
		
		_map.addEventListener('click', function (e) {
			console.log(e.latlng);
		});
	}



	function domInit(){
//		var changeFunc = toggleFunc('main-select', 'air');
		var categoryFunc = toggleFunc('category-select', 'category');
//		changeFunc(CleanMap.changeAirType); //대기질 변경
		categoryFunc(CleanMap.setCategory); // 구분변경
		stationType(CleanMap.setStationType, 'station'); // 측정망 변경

		var zoomInBtn = document.getElementsByClassName('zoom-in');
		if(zoomInBtn){
			zoomInBtn[0].addEventListener('click', function(){
				_map.zoomIn();
			})
		}

		var zoomOutBtn = document.getElementsByClassName('zoom-out');
		if(zoomOutBtn){
			zoomOutBtn[0].addEventListener('click', function(){
				_map.zoomOut();
			});
		}


		var normalLock = true;
		var sateLock = false;
		var normalMapBtn = document.getElementById('normalMap');
		var switchMap = mapBtnToggle(normalMapBtn);
		if(normalMapBtn){
			normalMapBtn.addEventListener('click', function(e){
				if(normalLock) return;
				normalLock = true;
				BaseMapChange(_map, L.Dawul.BASEMAP_GEN);
				switchMap(e);	
				CleanMap.Update();
				sateLock = false;
			});
		}

		var sateMapBtn = document.getElementById('sateMap');
		if(sateMapBtn){
			sateMapBtn.addEventListener('click', function(e){
				if(sateLock) return;
				sateLock = true;
				BaseMapChange(_map, L.Dawul.BASEMAP_SATE);
				_map.setView([37.566611, 126.978509], 4); 
				switchMap(e);	
				CleanMap.deleteFillColor();
				CleanMap.Update();
				normalLock = false;
			})
		}


		var mainBtnToggle = document.getElementsByClassName('main-btn-toggle');
		if(mainBtnToggle){
			mainBtnToggle[0].addEventListener('onmouseup', function(){
				mainBtnToggle[0].classList.remove('on');
			})
		}
		
		var legendOnOffBtn = document.getElementsByClassName('btn-pm-exam');
		var legendOnOffEl = document.getElementById('legendOnOff');

		if(legendOnOffBtn[0]){
			legendOnOffBtn[0].addEventListener('click', function(){
				if(legendOnOffEl.style.display === 'inline-block'){
					legendOnOffEl.style.display = 'none';
				}else{
					legendOnOffEl.style.display = 'inline-block';
				}
			})
		}
		
		setDom();
	}


	function toggleFunc(elementName, arg)/* 대기질 AND 자치/권역 선택 */{
		var selected = document.getElementsByClassName(elementName);
//		var current = selected[0];

		if ( elementName == "category-select" ) {
			current = selected[0];
		} else {
			var ckAirType = 'pm25';
			var link = document.location.href.split("?");
			
			if(link[1] != null && link[1] != "") {
				var index = link[1].split("&");
				var length = index.length;

				var type = "";

				if(length >= 2) {
					type = index[1].replace("type=", "");
				} else {
					if(index[0].includes("type")) {
						type = index[0].replace("type=", "");
					}
				}

				ckAirType = type;
			} else {
				ckAirType = CleanMap.Global.CurrentAirType;
			}
//			var current = selected[2]; // 여름 오존으로 변경
			var current = selected[0]; // 겨울 초미세먼지로 변경
			
			if (ckAirType == "pm25") current = selected[0];
			else if (ckAirType == "pm10") current = selected[1];
			else if (ckAirType == "o3") current = selected[2];
			$(current).addClass('on');
			var firstTitle = $(current).attr('title').split(" 선택됨");
			$(current).attr('title', firstTitle[0] + ' 선택됨');
		}

		return function(callback){

			for(var i=0; i < selected.length; i++){
				selected[i].addEventListener('click', function(e){
					if(CleanMap.isLock()){
						console.error('lock');
						return false;
					}
					var clicked;
					if(e.target.nodeName === 'SPAN'){
						clicked = e.target.parentNode;
					}else{
						clicked = e.target;
					}
					var title = $(clicked).attr('title').split(" 선택됨");;
					if(current == clicked){
						console.error(' ------------ lock ----------- !');
						return;
					}
					if(current){
						current.classList.remove('on');
						var beforeTitle = $(current).attr('title').split(" 선택됨");
						$(current).attr("title", beforeTitle[0]);
					}

					clicked.classList.add('on');
					$(clicked).attr("title", title[0] + " 선택됨");
					current = clicked;
					callback.call(CleanMap, current.dataset[arg]);
				})
			}
		}
	}


	function stationType(callback, arg)/* 측정소(망) 선택 */{
		var stationEl = document.getElementsByClassName('station-select');
		
		if(stationEl){
			[].forEach.call(stationEl, function(el){
				el.addEventListener('click', function(e){
					if(CleanMap.isLock()){
						console.error('lock');
						return false;
					}
					e.target.classList.toggle('on');
					var title = $(e.target).attr("title").split(" 선택됨");
					if(e.target.classList.contains("on")) {
						$(e.target).attr("title", title[0] + " 선택됨");
					} else {
						$(e.target).attr("title", title[0]);
					}
					
					callback.call(CleanMap, e.target.dataset[arg]);
				});	//addEventListener
			});	//forEach
		}
	}

	function mapBtnToggle(normalMapEl){

		var _current = normalMapEl;
		return function(e){
			CleanMap.Global.IsSatellite = CleanMap.Global.IsSatellite ? false : true;
			if(_current){
				_current.classList.remove('on');
				_current.removeAttribute('title');
			}
			e.target.classList.add('on');
			e.target.setAttribute('title', '선택됨');
			_current = e.target;
		}
	}
	
	
	function boardView(bbsSeq){
		var $form = $('<form></form>');
		$form.attr('action', CONTEXT_PATH + '/board/boardView');
	    $form.attr('method', 'post');
	    $form.attr('target', '_self');
	    $form.appendTo('body');
	    $form.append('<input type="hidden" value="notice" name="board"">');
	    $form.append('<input type="hidden" value="notice" name="bbsType">');
	    $form.append('<input type="hidden" value="'+bbsSeq+'" name="bbsSeq">');
	    $form.submit();
	}


	function setDom(){
		CleanMapDOM.setDomElement({
			regionName: document.getElementById('regionName') || '', // 지역구명
			dateTime: document.getElementById('dateTime') || '', // 기준시간
			pm25El: document.getElementById('pm25El') || '',
			pm10El: document.getElementById('pm10El') || '',
			o3El: document.getElementById('o3El') || '',
			no2El: document.getElementById('no2El') || '',
			coEl: document.getElementById('coEl') || '',
			so2El: document.getElementById('so2El') || '',

			pm25Stat: document.getElementById('pm25Stat') || '',
			pm10Stat: document.getElementById('pm10Stat') || '',
			o3Stat: document.getElementById('o3Stat') || '',
			no2Stat: document.getElementById('no2Stat') || '',
			coStat: document.getElementById('coStat') || '',
			so2Stat: document.getElementById('so2Stat') || '',

			// 비상저감
			mainEmergency: document.getElementsByClassName('main-emergency')[0] || '', 
/*			emerText: document.getElementById('emer-text') || '', 
			emerDate: document.getElementById('emer-date') || '', 
			emerType: document.getElementById('emer-type') || '', 
			emerStatus: document.getElementsByClassName('emerStatus')[0] || '', */

			prkplcAlert: document.getElementById('prkplcAlert') || '', // 예비저감조치
			spareAlert: document.getElementById('spareAlert') || '', // 비상저감조치
			
			pm25Alert: document.getElementById('pm25Alert') || '', // 대기오염 주의보/경보
			pm10Alert: document.getElementById('pm10Alert') || '', // 대기오염 주의보/경보
			o3Alert: document.getElementById('o3Alert') || '', // 대기오염 주의보/경보

			seoulAvg: document.getElementById('seoulAvg') || '', // 서울평균
			seoulDateTime: document.getElementById('seoulDateTime') || '', // 서울측정시간
			seoulAvgText: document.getElementById('seoulAvgText') || '', // 서울평균(좋음,나쁨등)

			// 대기오염 예보
			currentAirType: document.getElementsByClassName('currentAirType')[0] || '',
			forecast1: document.getElementById('forecast1') || '',
			forecast2: document.getElementById('forecast2') || '',
			forecast3: document.getElementById('forecast3') || '',
			ozoneForecast: document.getElementById('ozoneForecast') || '',
			dayForecastDate: document.getElementById('day-forecast-date') || '',

			selectGlobal: document.getElementById('select-global') || '',
			selectRegion: document.getElementById('select-region') || '',
			//regionLabel: document.getElementById('regionLabel') || '',
			//globalLabel: document.getElementById('globalLabel') || '',
			
			//TODO simple
			question: document.getElementById('question') || '',

			board: document.getElementById('board') || '',

			namsanGood: document.getElementById('namsanGood') || '',
			namsanNormal: document.getElementById('namsanNormal') || '',
			namsanBad: document.getElementById('namsanBad') || '',
			namsanFetal: document.getElementById('namsanFetal') || '',
			namsanGood2: document.getElementById('namsanGood2') || '',
			namsanNormal2: document.getElementById('namsanNormal2') || '',
			namsanBad2: document.getElementById('namsanBad2') || '',
			namsanFetal2: document.getElementById('namsanFetal2') || '',

			legendOnOff: document.getElementsByClassName('btn-pm-exam') || '',
			pm25Legend: document.getElementsByClassName('pm25-legend') || '',
			pm10Legend: document.getElementsByClassName('pm10-legend') || '',
			o3Legend: document.getElementsByClassName('o3-legend') || '',

			// 측정소 Poi 팝업
			poiPopupLayer: document.getElementById('stationPop') || '',
			popStationNm: document.getElementsByClassName('pop-station-name')[0] || '',
			popAddr: document.getElementsByClassName('pop-addr')[0] || '',
			popBeginYear: document.getElementsByClassName('pop-begin-year')[0] || '',
			popMeasureItem: document.getElementsByClassName('pop-measure-item')[0] || '',
			
			
//			greenPopupLayer: document.getElementById('greenPop') || '',
//			focusPopupLayer: document.getElementById('focusPop') || '',
			
			mainPopup: document.getElementById('mainPopup') || '',
			
			//TODO simple
			simpleInfoPopup: document.getElementById('simpleInfoPopup') || '',
			
			popNotice: document.getElementsByClassName('pop-notice')[0] || '',
		});

		
	}
